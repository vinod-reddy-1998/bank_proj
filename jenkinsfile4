pipeline {
    agent any
  environment {
        USER = 'ubuntu' // Adjust this to your actual username if different
    }

    stages {
        stage('Checkout Code from GitHub') { 
            steps {
                script {
                    git url: 'https://github.com/vinod-reddy-1998/bank_proj/', branch: 'master'
                    echo 'Checked out code from GitHub'
                }
            }
        }

        stage('Compile Code') {
            steps {
                script {
                    echo 'Starting compilation'
                    sh 'mvn compile'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    echo 'Running unit tests'
                    sh 'mvn test'
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                script {
                    echo 'Checking code quality'
                    sh 'mvn checkstyle:checkstyle'
                }
            }
        }

        stage('Package Application') {
            steps {
                script {
                    echo 'Packaging the application'
                    sh 'mvn package'
                }
            }
        }
        stage('Provision Servers with Terraform') {
            steps {
                script {
                    echo 'Provisioning servers with Terraform'
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Get Server IPs') {
            steps {
                script {
                    env.TEST_SERVER_IP = sh(script: 'terraform output -raw test_server_ip', returnStdout: true).trim()
                    env.PROD_SERVER_IP = sh(script: 'terraform output -raw prod_server_ip', returnStdout: true).trim()
                    echo "Test Server IP: ${env.TEST_SERVER_IP}"
                    echo "Production Server IP: ${env.PROD_SERVER_IP}"
                }
            }
        }

        stage('Configure Servers with Ansible') {
            steps {
                script {
                        // Ensure the key.pem file has the correct permissions
                    sh 'chmod 400 /var/lib/jenkins/workspace/finance/key.pem'
                    sh "ls -l \"${WORKSPACE}/finance\""
                    echo "Configuring test server at IP: ${env.TEST_SERVER_IP}"
                    sh "ansible-playbook -i '${env.TEST_SERVER_IP},' test_server_setup.yml --private-key ${WORKSPACE}/key.pem --user ${USER} -e \"ansible_ssh_common_args='-o StrictHostKeyChecking=no'\""
                    echo "Configuring production server at IP: ${env.PROD_SERVER_IP}"
                    sh "ansible-playbook -i '${env.PROD_SERVER_IP},' prod_server_setup.yml --private-key ${WORKSPACE}/key.pem --user ${USER} -e \"ansible_ssh_common_args='-o StrictHostKeyChecking=no'\""                }
            }
        }

        stage('Deploy Application to Test Server') {
            steps {
                script {
                    sh 'chmod 400 /var/lib/jenkins/workspace/finance/key.pem'
                    sh "ls -l \"${WORKSPACE}\""
                    sleep(60)
                    echo "target file listing"
                     sh 'ls -l target/'
                    echo 'Deploying application to test server'
                    sh "scp -i ${WORKSPACE}/key.pem target/banking-0.0.1-SNAPSHOT.jar ${USER}@${env.TEST_SERVER_IP}:./"
                    sh "ssh -i ${WORKSPACE}/key.pem ${USER}@${env.TEST_SERVER_IP} 'nohup java -jar ./banking-0.0.1-SNAPSHOT.jar &'"
                }
            }
        }

        stage('Run Smoke Tests on Test Server') {
            steps {
                script {
                    echo 'Running smoke tests on the test server'
                    sh "curl http://${env.TEST_SERVER_IP}:8091/health"
                }
            }
        }

        stage('Deploy Application to Production Server') {
            steps {
                script {
                    echo 'Deploying application to production server'
                    sh "scp -i ${WORKSPACE}/key.pem target/banking-0.0.1-SNAPSHOT.jar ${USER}@${env.PROD_SERVER_IP}:./"
                    sh "ssh -i ${WORKSPACE}/key.pem ${USER}@${env.PROD_SERVER_IP} 'nohup java -jar ./banking-0.0.1-SNAPSHOT.jar &'"
                }
            }
        }

        stage('Configure Monitoring with Prometheus and Grafana') {
            steps {
                script {
                    echo 'Updating Prometheus configuration with test and production server IPs'
                    sh """
                    sed -i 's/{{ test_server_ip }}/${env.TEST_SERVER_IP}/g' monitoring/prometheus.yml
                    sed -i 's/{{ prod_server_ip }}/${env.PROD_SERVER_IP}/g' monitoring/prometheus.yml
                    """
                    echo 'Deploying Prometheus and Grafana using Docker Compose'
                    dir('monitoring') {
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
        
        stage('Reload Prometheus Config') {
            steps {
                script {
                    echo 'Reloading Prometheus configuration'
                    sh "curl -X POST http://localhost:9090/-/reload"
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning up resources'
                sh 'terraform destroy -auto-approve'
            }
        }
    }
}
