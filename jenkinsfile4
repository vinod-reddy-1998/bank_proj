pipeline {
    agent any

    environment {
        TF_VAR_aws_access_key = credentials('aws-access-key') // Jenkins credentials ID for AWS Access Key
        TF_VAR_aws_secret_key = credentials('aws-secret-key') // Jenkins credentials ID for AWS Secret Key
    }

    stages {
        stage('Checkout Code from GitHub') {
            steps {
                script {
                    git url: 'https://github.com/vinod-reddy-1998/Banking-java-project/'
                    echo 'Checked out code from GitHub'
                }
            }
        }

        stage('Compile Code') {
            steps {
                script {
                    echo 'Starting compilation'
                    sh 'mvn compile'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    echo 'Running unit tests'
                    sh 'mvn test'
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                script {
                    echo 'Checking code quality'
                    sh 'mvn checkstyle:checkstyle'
                }
            }
        }

        stage('Package Application') {
            steps {
                script {
                    echo 'Packaging the application'
                    sh 'mvn package'
                }
            }
        }

        stage('Provision Servers with Terraform') {
            steps {
                script {
                    echo 'Provisioning servers with Terraform'
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Get Server IPs') {
            steps {
                script {
                    env.TEST_SERVER_IP = sh(script: 'terraform output -raw test_server_ip', returnStdout: true).trim()
                    env.PROD_SERVER_IP = sh(script: 'terraform output -raw prod_server_ip', returnStdout: true).trim()
                    echo "Test Server IP: ${env.TEST_SERVER_IP}"
                    echo "Production Server IP: ${env.PROD_SERVER_IP}"
                }
            }
        }

        stage('Configure Servers with Ansible') {
            steps {
                script {
                    echo "Configuring test server at IP: ${env.TEST_SERVER_IP}"
                    sh "ansible-playbook -i '${env.TEST_SERVER_IP},' test_server_setup.yml"
                    echo "Configuring production server at IP: ${env.PROD_SERVER_IP}"
                    sh "ansible-playbook -i '${env.PROD_SERVER_IP},' test_server_setup.yml"
                }
            }
        }

        stage('Deploy Application to Test Server') {
            steps {
                script {
                    echo 'Deploying application to test server'
                    sh "scp target/myapp.jar user@${env.TEST_SERVER_IP}:/path/to/deploy/"
                    sh "ssh user@${env.TEST_SERVER_IP} 'java -jar /path/to/deploy/myapp.jar &'"
                }
            }
        }

        stage('Run Smoke Tests') {
            steps {
                script {
                    echo 'Running smoke tests'
                    sh "curl http://${env.TEST_SERVER_IP}:8091/health"
                }
            }
        }

        stage('Deploy Application to Production') {
            steps {
                script {
                    echo 'Deploying application to production server'
                    sh "scp target/myapp.jar user@${env.PROD_SERVER_IP}:/path/to/deploy/"
                    sh "ssh user@${env.PROD_SERVER_IP} 'java -jar /path/to/deploy/myapp.jar &'"
                }
            }
        }

        stage('Configure Monitoring') {
            steps {
                script {
                    echo 'Configuring Prometheus and Grafana'
                    sh "kubectl apply -f prometheus-config.yml"
                    sh "kubectl apply -f grafana-config.yml"
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning up resources'
                sh 'terraform destroy -auto-approve'
            }
        }
    }
}
